import {
  wasabiBattle,
  amogusBattle,
  oldManBattle,
  triggerBattle,
} from "./battles";
import { state } from "./game";
import { wasabi } from "./sprites";

const sprites = {
  switchOff: "Ê",
  switch: "Ë",
  max: ":",
  caveEntrance: "-",
  chest: "Å",
  amogus: "Ñ",
  vent: "¢",
  desk: "?",
  ghost: "Z",
  staircase: "Â",
  sign: "É",
  player: ")",
  ladder: "¡",
  ironDoor: "j",
  woodenDoor: "b",
  kara: "B",
  oldMan: "2",
  trigger: "Ò",
};

const setAfterInput = (() => {
  let fn = () => {};
  afterInput((x) => fn());
  return (_fn) => (fn = _fn);
})();

const BLANK_SCREEN = map`
.....
.....
.....
.....`;

class MapStr {
  constructor(str) {
    this.arr = (str.trim() + "\n").split("").filter((x) => x != " ");
    this.width = this.arr.indexOf("\n");
    this.height = this.arr.length / this.stride;
  }

  get stride() {
    return this.width + 1;
  }

  read(x, y) {
    return this.arr[y * this.stride + x];
  }
  write(x, y, c) {
    this.arr[y * this.stride + x] = c;
  }

  *positionsOf(c) {
    let i = -1;
    while (true) {
      i = this.arr.indexOf(c, i + 1);
      if (i == -1) return;
      yield [i % this.stride, Math.floor(i / this.stride)];
    }
  }

  set() {
    setMap(this.arr.join(""));
  }
  push() {
    let tx = 0,
      ty = 0;
    const chars = [...this.arr];
    const peek = () => chars[0];
    const pop = () => chars.shift();

    do {
      switch (peek()) {
        case " ":
          continue;
        case "\n":
          ty++, (tx = 0);
          break;
        case ".":
          tx++;
          break;
        case "\0":
          break;
        default:
          {
            if (tx >= width()) continue;
            if (ty >= height()) continue;
            addSprite(tx, ty, peek());
            tx++;
          }
          break;
      }
    } while (pop());
  }
}
let rooms;
const resetRooms = () => rooms = {
  outside: [
    /* ground layer (under player) */
    new MapStr(map`
  $%$!$$$$$$$$
  $$$!$%%$$%$!
  $$$$$$!$$$$$
  $$$%$$!!$$$$
  $$"$$$$$$$%$
  !$"%%$$$$$$$
  !$$%$$9$$$$$
  $$$$&8I80$9$
    88881$$$(8I8`),
    /* hard layer (stops player movement) */
    new MapStr(map`
  .©©.©©©...Í.
  ............
  .¾¾¾........
  .¾¾¶.¶¶¶....
  .¶¶¶.¶¶¶.¶¶¶
  .¶¶¶.¶.¶¶¶¶¶
  .¶.¶.....¶.¶
  ...É........
  ......¶.....`),
    /* house layer (floats above player) */
    new MapStr(map`
  ............
  ............
  .*3;..£³....
  .+#<.[¤´..£³
  .+#<.^¥µ.[¤´
  .+#<.abq.^¥µ
  .,-=.....Qbq
  ............
  ............`),
  ],
  hq: [
    new MapStr(map`
.....
[dddl
]eeem
^fffn`),
    new MapStr(map`
.iii.
.B...
.....
..¢..`),
    new MapStr(map`
¡...b
.....
.....
.....`),
  ],
  callRoom: [
    new MapStr(map`
.....
[dddl
]eeem
^fffn`),
    new MapStr(map`
.zi.i
...Å.
.....
..Z?.`),
    new MapStr(map`
Â..b.
.....
.....
.....`),
  ],
  closet: [
    new MapStr(map`
.....
..[dl
..^fn
.....`),
    new MapStr(map`
ÐÐa.q
ÐÐ...
ÐÐ2..
ÐÐÐÐÐ`),
    new MapStr(map`
...b.
.....
.....
.....`),
  ],
  bank: [
    new MapStr(map`
...........
[dddddddddl
]PePePePePm
]ePePePePem
]PePePePePm
^fffffffffn`),
    new MapStr(map`
aiziiriiziq
...........
...........
...........
...........
...........`),
    new MapStr(map`
...........
...........
...........
..........Ë
...........
...........`),
  ],
};
resetRooms();
const [outsideToCave] = [...rooms.outside[2].positionsOf(sprites.caveEntrance)];
const [outsideToCStore, outsideToHq] = [
  ...rooms.outside[2].positionsOf(sprites.woodenDoor),
];
const [hqToOutside] = [...rooms.hq[2].positionsOf(sprites.woodenDoor)];
const [hqToCallRoom] = [...rooms.hq[2].positionsOf(sprites.ladder)];
const [callRoomToHq] = [...rooms.callRoom[2].positionsOf(sprites.staircase)];
const [callRoomToCloset] = [
  ...rooms.callRoom[2].positionsOf(sprites.woodenDoor),
];
const [closetToCallRoom] = [...rooms.closet[2].positionsOf(sprites.woodenDoor)];
const doors = [
  { active: 1, pos: { outside: outsideToHq, hq: hqToOutside } },
  { active: 1, pos: { callRoom: callRoomToHq, hq: hqToCallRoom } },
  { active: 0, pos: { callRoom: callRoomToCloset, closet: closetToCallRoom } },
];
const findDoorAtPos = (pos, rk = roomKey) =>
  doors.find((x) => pos + "" == "" + x.pos[rk]);
const [callRoomDeskPos] = [...rooms.callRoom[1].positionsOf(sprites.desk)];
const [callRoomChestPos] = [...rooms.callRoom[1].positionsOf(sprites.chest)];
const [hqHiddenVent] = [...rooms.hq[1].positionsOf(sprites.vent)];
const [signPos] = [...rooms.outside[1].positionsOf(sprites.sign)];
const ellaPos = [signPos[0] - 3, signPos[1]];
const [switchPos] = [...rooms.bank[2].positionsOf(sprites.switch)];
rooms.hq[1].write(...hqHiddenVent, ".");
const doormat = (pos) => [pos[0], pos[1] + 1];
const above = (pos) => [pos[0], pos[1] - 1];
let triggers;
const resetTriggers = () => triggers = {
  outside: [
    { active: 1, pos: outsideToCave, fn: doorLockedBank },
    { active: 0, pos: outsideToCave, fn: tombOf1kTriggers },
    { active: 1, pos: outsideToCStore, fn: doorLockedCStore },
    { active: 0, pos: outsideToCStore, fn: zachAtCStore },
    { active: 0, pos: doormat(signPos), fn: maxBankNeedsRestart },
    { active: 0, pos: ellaPos, fn: ellaInteract },
  ],
  hq: [
    { active: 1, pos: doormat(hqToOutside), fn: karaYouLate },
    { active: 0, pos: doormat(hqToOutside), fn: zachYouLate },
    { active: 0, pos: doormat(hqToOutside), fn: karaYouBlackedOut },
    { active: 1, pos: doormat(hqToCallRoom), fn: karaTakeThis },
    { active: 0, pos: doormat(hqToCallRoom), fn: karaDidZachVent },
    { active: 0, pos: above(hqHiddenVent), fn: amogusGonFiteU },
    { active: 0, pos: doormat(hqToOutside), fn: karaHealUrMonz },
  ],
  callRoom: [
    { active: 1, pos: doormat(callRoomToHq), fn: wasabiGonFiteU },
    { active: 1, pos: above(callRoomDeskPos), fn: heyThatsZachsDesk },
    { active: 1, pos: callRoomToCloset, fn: pushCobwebs },
  ],
  closet: [
    { active: 1, pos: doormat(doormat(closetToCallRoom)), fn: oldManGonFiteU },
  ],
  bank: [{ active: 1, pos: switchPos, fn: bankFlipSwitch }],
};
resetTriggers();
const findFnsTrigger = (fn) =>
  Object.values(triggers)
    .flat()
    .find((x) => x.fn == fn);
const offMapLayerLivers = {
  [sprites.switchOff]: 2,
  [sprites.switch]: 2,
  [sprites.max]: 1,
  [sprites.player]: 1,
  [sprites.vent]: 1,
  [sprites.amogus]: 2,
  [sprites.kara]: { hq: 1, callRoom: 1, outside: 2 },
  [sprites.trigger]: 2,
};

/* becomes the legend after being sorted according to
 * what layer the tile appears in*/
const tiles = [
  [
    "!",
    bitmap`2222222221222222
2222222222222222
2222222222222222
2222122222222222
2222112222212122
2222212222221222
2222222222222222
2121222222222222
2212222222222222
2222222222222222
2222222122222222
2222221122222222
2221221222221212
2221122222222122
2222122222222222
2222222212122222`,
  ],
  [
    '"',
    bitmap`2222222221222222
2121222222222221
2212222222212211
2222222222211212
2222222222221222
2222222222222222
2222222121222222
2222222212222222
2222222222222222
2222222222221212
2222221222222122
2212211222222222
2211212222222222
2221222222222222
2222222222222222
2222222212122222`,
  ],
  [
    "#",
    bitmap`2222222221222222
2222222222222222
2222222222222222
2212122222222222
2221222222222222
2222222222121222
2222222222212222
2222221212222222
2222222122222222
2222222222222122
2222212222221122
2122112222221222
2112122222222222
2212222222222222
2222222222222222
2222222212122222`,
  ],
  [
    "$",
    bitmap`2222222221222222
2222222222222222
2222222222222222
2222222222221212
2121222222222122
2212222222222222
2222222222222222
2222222212222222
2222222211221222
2222222221211222
2222222222212222
2222222222222222
2221212222222222
2222122222222222
2222222222222222
2222222212122222`,
  ],
  [
    "%",
    bitmap`2222222221222222
2222222222222222
2222222221121122
2222222221L1L122
2121222222121222
2212222221L1L122
2222222221121122
2222222222222222
2222222222222222
2211211222222222
221L1L1222222222
2221212222221212
221L1L1222222122
2211211222222222
2222222222222222
2222222212122222`,
  ],
  [
    "&",
    bitmap`2222222222222222
2222222222111122
2222221111111111
2222111211111111
2221111111111111
2221121111111111
2211111111111111
2211111111111111
2211111111111111
2211111111111111
2111111111111111
2111111111111111
2121111111111121
2111111111122111
2211111111122122
2211111111111122`,
  ],
  [
    "(",
    bitmap`2211111111111122
2211111111122122
2111111111122111
2111111111111121
2111111111111111
2111111111111111
2211111111111111
2212111111111111
2211111111111111
2211221111111111
2221221111111111
2221111111111111
2222111211111111
2222221111111111
2222222222111122
2222222222222222`,
  ],
  [
    ")",
    bitmap`2222222222222222
2222222222222222
2222L000000L2222
222L0LLLLLL0L222
2220LLLLLLLL0L22
2220L12LL2102022
2220L22222202022
2220220220202022
2220L20220202022
2L000L2222102022
2012101111L010L2
2022201111022202
202220LLLL00L002
201210L00LL00022
2200011001101222
2222222222222222`,
  ],
  [
    "*",
    bitmap`2222L00000000000
22L0011111111111
2L01122222111122
2012222222222222
L012222222221222
0122222222222222
0122222121222222
0122222212222222
0122222222222222
0122222222221212
0112221222222122
0112211222222222
0112212222222222
0112222222222222
0122222222222222
0122222212122222`,
  ],
  [
    "+",
    bitmap`0122222221222222
0122222222222222
0112212122222222
0112221222222222
0112222222221222
0112222222211222
0122222212212222
0122222211222222
0122222221222222
0122222222222222
0112222222212122
0112222222221222
0112122222222222
0112222222222222
0122222222222222
0122222212122222`,
  ],
  [
    ",",
    bitmap`0122222221222222
0122222222222221
01L2222222212211
011LL22222222222
01111LLL22LLLL22
01211111LL1111LL
0122221111222211
0112222222222222
0121112222111122
0122221111222211
0122222222222222
L012222222222222
2011112222111122
2L01111111111111
22L00LL111LLLL11
2222L00000000000`,
  ],
  [
    "-",
    bitmap`2222222222222222
2222222222221222
2222222222222222
2222222222222222
22LLLL2222LLLL22
LL1111LLLL1111LL
1122221111222211
2222220000222222
2211100000011122
1122000000002211
2222000000002222
2220000000000222
2210000000000122
11100LLLLLL00111
11L0LLLLLLLL0L11
0000LLLLLLLL0000`,
  ],
  [
    "/",
    bitmap`2222222222222222
2222222222221222
2222222222222222
2222222222222222
22LLLL2222LLLL22
LL1111LLLL1111LL
1122221111222211
2222220000222222
2211101221011122
1122012222102211
2222021111202222
2220121111210222
2210211LL1120122
1110211LL1120111
11L0211111120L11
0000222222220000`,
  ],
  [
    "0",
    bitmap`2222222222222222
2211112222222222
1111111111222222
1111111121112222
1111111111111222
1111111111221222
1111111111221122
1111111111111122
1111111111112122
1111111111111122
1111111111111112
1111111111111112
1211111111111112
1112111111111112
2211111111111122
2211111111111122`,
  ],
  [
    "1",
    bitmap`2211111111111122
2211211111111122
1111111111111112
1221111111111112
1221111111111112
1111111111111112
1111111111111122
1111111111112122
1111111111111122
1111111112211122
1111111112211222
1111111111111222
1111111121112222
1111111111222222
2211112222222222
2222222222222222`,
  ],
  [
    "2",
    bitmap`222222L00L222222
22222L0110L22222
2222001111002222
22L01L2222L10L22
2201111111110002
2200LLLLLLLL0202
2220L22LL22L0202
2220L202202L0202
2220L202202L0202
22L0LL2LL2LL0202
22022LL00LL20102
220221LLLL120L02
22L0011LL1100102
2222011111100202
22210LL00LL00002
2222222222222222`,
  ],
  [
    "3",
    bitmap`0000000000000000
1111111111111111
2211112222111122
2222222222222222
2222112222212122
2222212222221222
2222222222222222
2121222222222222
2212222222222222
2222222222222222
2222222122222222
2222221122222222
2221221222221212
2221122222222122
2222122222222222
2222222212122222`,
  ],
  [
    "4",
    bitmap`2222222221222222
2222222222222222
2222222222222222
2212122222222222
2221222222222222
2222222222121222
2222222222212222
2222221212222222
2222222122222222
2222222222222122
2222212222221122
2122112222221222
2112122222222222
2212222222222222
2222222222222222
2222222212122222`,
  ],
  [
    "5",
    bitmap`2222222221222222
2222222222222222
2222222222222222
2222222222222222
22LLLL2222LLLL22
LL1111LLLL1111LL
1122221111222211
2222222222222222
2211112222111122
1122221111222211
2222222222222222
2222222222222222
2211112222111122
1111111111111111
11LLLL1111LLLL11
0000000000000000`,
  ],
  [
    "6",
    bitmap`2222222222222222
2222121222222222
2222212222222222
2222222222222222
22LL22222222LL22
LL1L22222222L1LL
112L11111111L211
222LL111111LL222
221L22222222L122
112L22222222L211
222L11111111L222
222LL111111LL222
221L22222222L122
111L22222222L111
11LL11111111LL11
0000L111111L0000`,
  ],
  [
    "7",
    bitmap`2222222222222222
2222222222212122
2222222222221222
2222222222222222
22LL22222222LL22
LL1L21212222L1LL
112L22122222L211
222L22222222L222
221L22222222L122
112L22222222L211
222L22222222L222
222L22222222L222
221L22222222L122
111L22221212L111
11L0222221220L11
0002222222222000`,
  ],
  [
    "8",
    bitmap`2222222222222222
2211112222111122
1111111111111111
1211111122112111
1111111122111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1112211111111111
1212212111111121
1111111111111111
2211112222111122
2222222222222222`,
  ],
  [
    "9",
    bitmap`2211111111111122
2211111111112122
2111111111111112
2112111111111112
2111111111111112
2111111111111112
2212211111111122
2212211111111122
2211111111111122
2211111111111122
2111111111111112
2111111111111112
2111111111111212
2111111111111112
2212111111111122
2211111111111122`,
  ],
  [
    ":",
    bitmap`2222222222222222
2222220000222222
2222L00LL00L2222
222L0LLLLLL0L222
2220LLLLLLLL0222
2220L1LLLL1L0222
2220L222222L0222
2220220220220222
2220020220200222
22L0L12LL21L0L22
220221L22L122022
2202211111122022
22L0011111100L22
22220LL00LL02222
2221011001101222
2222222222222222`,
  ],
  [
    ";",
    bitmap`00000000000L2222
1111111111100L22
22111122222110L2
2222222222222102
222222222222210L
2222222222222210
2222222121222210
2222222212222210
2222222222222210
2222222222222210
2222221222222110
2212211222222110
2211212222222110
2221222222222110
2222222222222210
2222222212122210`,
  ],
  [
    "<",
    bitmap`2222222221222210
2222222222222210
2222212122222110
2222221222222110
2222222222222110
2212222222212110
2211222212212210
2221222211222210
2222222221222210
2222222222222210
2222222222212110
2222222222222110
2212122222222110
2221222222222110
2222222222222210
2222222212122210`,
  ],
  [
    "=",
    bitmap`2222222221222210
2121222222222210
2212222222222L10
22222222222LL110
22LLLL22LLL11110
LL1111LL11111210
1122221111222210
2222222222222110
2211112222111210
1122221111222210
2222222222222210
222222222222210L
2211112222111102
11111111111110L2
11LLLL111LL00L22
00000000000L2222`,
  ],
  [
    ">",
    bitmap`2222222222222222
2222222222222212
2220002222000222
2220202222020222
22L0100000010L22
LL101L1111L101LL
1120100000010211
2220102222010222
2210100000010122
11201L1111L10211
2220100000010222
2220102222010222
2210100000010122
11101L1111L10111
11L0100000010L11
0000001111000000`,
  ],
  [
    "?",
    bitmap`2202222222222022
2102222222222012
2012222222222102
2000000000000002
2222222222222222
2LLLLLLLLLLLLLL2
2111111111111112
2111111111111112
2111111111111112
2111111111111112
2111111111111112
2222222222222222
2000000000000002
2012222222222102
21022212L2122012
2202222222222022`,
  ],
  [
    "@",
    bitmap`2211111111111122
2211111111111112
2111111111111111
2112111111111111
2111111111111111
2111111111111111
2212211111111111
2212211111111111
2211111111111111
2211111111111111
2111111111111111
2111111111111111
2111111111111111
2111111111111111
2212111111112112
2211111111111122`,
  ],
  [
    "A",
    bitmap`2211111111111122
2112111111112122
1111111111111112
1111111111111112
1111111111111112
1111111111111112
1111111111111122
1111111111111122
1111111111122122
1111111111122122
1111111111111112
1111111111111112
1111111111112112
1111111111111112
2112111111111122
2211111111111122`,
  ],
  [
    "B",
    bitmap`2222222222222222
2222222222222222
2222L000000L2222
222L01L1LLL0L222
2220LL2LLLLL0222
2220L1L1L21L0222
2220LLLL122L0222
2220LL01202L0222
2220L102202L0222
22L0L122221L0L22
2202211111122022
22022LL11LL22022
22L00L1111L00L22
22220LLLLLL02222
2221011001101222
2222222222222222`,
  ],
  [
    "C",
    bitmap`2222222222222222
2222222221000012
2222210000111100
2221001111111111
2210111111222211
2201112222222222
2201222222222222
220222222212L212
2202222222222222
2102222222222222
2012212122222222
2012222222222222
2012222222222222
2012222212L21222
2102212222222222
2202222222222222`,
  ],
  [
    "D",
    bitmap`2202222222222222
2102222222222222
2012222222222222
20122222212L2122
2012222222222222
2012222222222222
2102121222222222
2202222222222222
2202222222222222
2102222122222222
2012222222222222
2012222222222222
2012222222222222
2012222222222222
21022212L2122222
2202222222222222`,
  ],
  [
    "E",
    bitmap`2202222222222222
2102222222222222
2012221222222222
2012222222212122
2012222222222222
2012222222222222
2012222222222222
2012212L21222222
2012222222222222
2102222222222222
2202222222121222
2210222222222222
2221002222222222
2222210000222200
2222222221000012
2222222222222222`,
  ],
  [
    "F",
    bitmap`2202222222222022
2102222222222012
2012222222222102
2012222221222102
2012222222222102
2012222222222102
2102121222222012
2202222222222022
2202222222222022
2102222122222012
2012222222222102
2012222222222102
2012222222222102
2012222222222102
21022212L2122012
2202222222222022`,
  ],
  [
    "G",
    bitmap`2222222222222222
2100001221000012
0011110000111100
1111111111111111
1122221111222211
2221222222222222
2222222222222222
22222222212L2122
2222222222222222
2222212122222222
2222222222222222
2222222222222222
2222222222222222
0022220000222200
2100001221000012
2222222222222222`,
  ],
  [
    "H",
    bitmap`2222222222222222
2211112222111122
1111111111111111
1112112211111121
1111112211111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1211111111111121
1111111111111111
2111111111111112
2211111111111122`,
  ],
  [
    "I",
    bitmap`2211111111111122
2111111111111112
1111111111111111
1211111111111121
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111112211111111
1112112211111121
1111111111111111
2211112222111122
2222222222222222`,
  ],
  [
    "J",
    bitmap`2222222222222222
2222222222222222
2222222222222222
2222200000022222
222201LLLL102222
22201LLLLLL10222
22L0LLLLLLLL0L22
2L01LLLLLLLL10L2
2020L122221L0202
2020120220210202
2020022112200202
2L021000000120L2
2202120220212022
22L000L22L000L22
2222222222222222
2222222222222222`,
  ],
  [
    "K",
    bitmap`2222222222222222
2100001221000012
0011110000111100
1111111111111111
1122221111222211
2221222222222222
2222222222222222
22222222212L2122
2222222222222222
2222212122222222
2222222222222222
2222222222222222
2212222222222222
2222222222222222
22222212L2122222
2222222222222222`,
  ],
  [
    "L",
    bitmap`2222222222222222
2222222222222222
2221212222222222
2222222222222122
2222222222222222
2222222222222222
2222222222222222
22222212L2122222
2222222222222222
2222222222212122
2222222222222222
2212122222222222
2222222222222222
2222222222222222
2222222212222222
2222222222222222`,
  ],
  [
    "M",
    bitmap`2222222222222222
2222222222222222
222222222212L212
2222222222222222
2222222222222222
2212L21222222222
2222222222222222
2222222222222222
2222222212122222
2222222222222222
2221222222222222
2222222222222222
2222222222222222
0022220000222200
2100001221000012
2222222222222222`,
  ],
  [
    "N",
    bitmap`2222222222222222
2222222221000012
2222210000111100
2221001111111111
2210111111222211
2201112222222222
2201222222222222
220222222212L212
2202222222222222
2102222222222222
2012212122222222
2012222222222222
2012222222222222
2012222222222200
2102212222222012
2202222222222022`,
  ],
  [
    "O",
    bitmap`2202222222222022
2102222222222012
2012221222222100
2012222222212111
2012222222222211
2012222222222222
2012222222222222
2012212L21222222
2012222222222222
2102222222222222
2202222222121222
2210222222222222
2221002222222222
2222210000222200
2222222221000012
2222222222222222`,
  ],
  [
    "P",
    bitmap`2211111111111122
2112111111112112
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
2111111111112112
2211111111111122`,
  ],
  [
    "Q",
    bitmap`0122222222222222
0112222222222222
011222L0000L2222
0122220111102222
0122220122102222
0112220122102112
0112220111102222
0122220122101122
0122220122102222
0112220111102222
011222L0000L2222
0122222222222222
0122222222222222
0111111111111111
0111111111111111
L000000000000000`,
  ],
  [
    "R",
    bitmap`2222222222222222
2222222222222222
2222L000000L2222
222L01222210L222
22201222212L0L22
2220222222202022
22202L0110L02022
2220220220202022
2220L22222202022
22L00L1221L02022
220222LLLLL010L2
2201L12112022202
220202122100L002
22L0010000100022
2221020110201222
2222222222222222`,
  ],
  [
    "S",
    bitmap`2222222222222222
2100001222222222
0011110000122222
1111111111001222
1122221111110122
2222222222111022
2222222222221022
212L212222222022
2222222222222022
2222222222222012
2222222212122102
2222222222222102
2222222222222102
22212L2122222102
2222222222122012
2222222222222022`,
  ],
  [
    "T",
    bitmap`2222222222222022
2222222222122012
2222222222222102
2222222222222102
2212L21222222102
2222222222222102
2222222222222012
2222222212122022
2222222222222022
2222222222222012
2222222222222102
2222222222222102
2212122222222102
2222222222222102
2222222122222012
2222222222222022`,
  ],
  [
    "U",
    bitmap`2222222222222022
2222222222222012
2222222212122102
2222222222222102
2222222222222102
2222212L21222102
2222222222222102
2222222222222102
2212222222222102
2222222222222012
2222222222222022
2222121222220122
2222222222001222
0022220000122222
2100001222222222
2222222222222222`,
  ],
  [
    "V",
    bitmap`2222222222222222
2100001222222222
0011110000122222
1111111111001222
1122221111110122
2222222222111022
2222222222221022
2222212122222022
2222222222222022
2222222222222012
2222222222222102
2212L21222222102
2222222222222102
0022222222222102
2102222222122012
2202222222222022`,
  ],
  [
    "W",
    bitmap`2202222222222022
2102222222222012
0012222222222102
111212L212222102
1122222222222102
2222222222222102
2222222222222102
2222222212122102
2212222222222102
2222222222222012
2222212122222022
2222222222220122
2222222222001222
0022220000122222
2100001222222222
2222222222222222`,
  ],
  [
    "X",
    bitmap`2222222222222222
2222111111112222
2211121211111122
2211112111111122
211111111L1L1112
2111111111L11112
2112111111111212
2111121111111112
2111111111111112
2111111111212112
211L1L1111121112
2111L11111111112
221111L1L1111122
2211111L11111122
2222111111112222
2222222222222222`,
  ],
  [
    "Y",
    bitmap`2222222222222210
2222222222222110
2222L0000L222110
2222011110222210
2211012210222210
2211012210222110
2222011110222110
2112012210222210
2222012210222210
2222011110222110
2222L0000L222110
2112222222222210
2222222222222210
1111111111111110
1111111111111110
000000000000000L`,
  ],
  ["Z", wasabi],
  [
    "[",
    bitmap`L000000000000000
0222222222222222
0222222222222222
022LLLLLLLLLLLLL
022LLLLLLLLLLLLL
022L111111111111
022L111111211111
022L1L1221111111
022L111221111111
022L111111111111
022L111111111111
022L111111111111
022L111111111211
022L111111LL1111
022L111111LL1111
022L111111111111`,
  ],
  [
    "]",
    bitmap`022L111111111111
022L111111111111
022L111111111111
022L111111122111
022L111111122111
022L111111111111
022L111111111111
022L111111111111
022L111L11111111
022L111111111111
022L1LL111111111
022L1LL122111111
022L111122111111
022L111111111111
022L111111111111
022L111111111111`,
  ],
  [
    "^",
    bitmap`022L111111111111
022L111111111111
022L111111111111
022L112211111111
022L112212111111
022L111111111111
022L111111LL1111
022L1111L1LL1111
022L111111111111
022L11111111L111
022L111111111111
022L111111111111
022L111111111111
0222222222222222
0222222222222222
L000000000000000`,
  ],
  [
    "_",
    bitmap`022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220
022L11111111L220`,
  ],
  [
    "`",
    bitmap`0000000000000000
2222222222222222
2222222222222222
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
2222222222222222
2222222222222222
0000000000000000`,
  ],
  [
    "a",
    bitmap`0122222222222222
0112222222222222
0112222111222222
0122222111222222
0122222222222222
0112211121122222
0112211122222222
0122222222222222
0122222222222222
0112222222222222
0112222222222222
0122222222112222
0122222222222222
0111111111111111
0111111111111111
L000000000000000`,
  ],
  [
    "b",
    bitmap`2222222222222222
2112222222222222
2222222222222222
2222000000002222
2220222222220222
2202211111122022
2202122222212022
2202122222212022
2202122222212022
22021111111L2012
220222222LL12022
22021111111L2022
2202122222212022
1102111111112011
1102222222222011
0000000000000000`,
  ],
  [
    "c",
    bitmap`2222222222222222
222222L00L222222
2222220210222222
2222220220222222
2222220210222222
2222220220222222
2222220210222222
2222220220222222
2222220210222222
2222L002200L2222
2222021221202222
2222000LL0002222
2222220LL0222222
2222220220222222
222222L00L222222
2222222222222222`,
  ],
  [
    "d",
    bitmap`0000000000000000
2222222222222222
2222222222222222
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
1111111111111111
1111112211111111
1111212211111111
11111111111LL111
11111111111LL111
11111111111111L1
11111111111L1111
1111111111111111
1111111111111111
1111111111111111
1111111111111111`,
  ],
  [
    "e",
    bitmap`1111111111111111
11111LL111111111
11LL1LL121111111
11LL111111111111
1111122111111111
1L11122111111111
1111111111111111
1111111111111LL1
1111111111111LL1
1111111111111111
111111111111LL11
112211111111LL11
1122121111111111
11111111111111L1
1111111111111111
1111111111111111`,
  ],
  [
    "f",
    bitmap`1111111111111111
1111111111111221
11L1111111111221
1111111111111111
1111111111111111
11111111LL111121
11111111LL111111
1111LL1111111111
1111LL1221111111
1111111221111111
1111211111111111
1111111111111111
1111111111111111
2222222222222222
2222222222222222
0000000000000000`,
  ],
  [
    "g",
    bitmap`L000000000000000
0222222222222222
0222222222222222
022LLLLLLLLLLLLL
022LLLLLLLLLLLLL
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111222
022L111111111222
022L11111111L220`,
  ],
  [
    "h",
    bitmap`022L11111111L220
022L11111111L222
022L11111111L222
022L11111111LLLL
022L11111111LLLL
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
022L111111111111
0222222222222222
0222222222222222
L000000000000000`,
  ],
  [
    "i",
    bitmap`2222222222222222
2222112222222222
2222222222222222
2211222222222222
2222222222222222
2222222211122222
2222222211121122
2222222222222222
2222221122111222
2222222222111222
2222222222222222
2222112222222222
2222222222222222
1111111111111111
1111111111111111
0000000000000000`,
  ],
  [
    "j",
    bitmap`2222222222222222
2222222222112222
2222222222222222
2220000000000222
2202222222222022
2202L111111L2022
2202111111112022
2102111111112022
2202111111112022
2202112222112022
2202222002222012
2202112222112022
2202111111112022
1102L111111L2011
1102222222222011
0000000000000000`,
  ],
  [
    "k",
    bitmap`2222222222222222
2222222222222222
2222222222222222
2221000220001222
2210122002210122
2201222222221022
2202222222222022
2202222222222022
2220222222220222
2222022222202222
2222202222022222
2222220220222222
2222222002222222
2222222222222222
2222222222222222
2222222222222222`,
  ],
  [
    "l",
    bitmap`000000000000000L
2222222222222220
2222222222222220
LLLLLLLLLLLLL220
LLLLLLLLLLLLL220
111111111111L220
111111111111L220
111111111111L220
111L11111111L220
111111111111L220
1111LL111111L220
1111LL1LL111L220
1111111LL111L220
122121111111L220
122111111111L220
111111111111L220`,
  ],
  [
    "m",
    bitmap`111111111111L220
111111111111L220
111112211111L220
111212211111L220
1111111111L1L220
111111111111L220
111111L1LL11L220
11111111LL11L220
111111111111L220
111111111111L220
111111111L11L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220`,
  ],
  [
    "n",
    bitmap`111111111111L220
11111L111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
11LL11121111L220
11LL11111221L220
111111221221L220
1L1111221111L220
111111111111L220
111111111111L220
2222222222222220
2222222222222220
000000000000000L`,
  ],
  [
    "o",
    bitmap`000000000000000L
2222222222222220
2222222222222220
LLLLLLLLLLLLL220
LLLLLLLLLLLLL220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
222111111111L220
222111111111L220
022L11111111L220`,
  ],
  [
    "p",
    bitmap`022L11111111L220
222L11111111L220
222L11111111L220
LLLL11111111L220
LLLL11111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
111111111111L220
2222222222222220
2222222222222220
000000000000000L`,
  ],
  [
    "q",
    bitmap`2222222222222210
2222222222222110
2222222222222110
2222211211222210
2222222222222210
2222222211122110
2222222211122110
2222222222222210
2222221122222210
2222222222222110
2221112222222110
2221112222222210
2222222222222210
1111111111111110
1111111111111110
000000000000000L`,
  ],
  [
    "r",
    bitmap`2222222222222222
2222211222222222
2222222222222222
2111L000000L1112
2111011111101112
2112012222102112
2111012222101112
2111011111101112
2111012222101112
2112012222102112
2111011111101112
2111L000000L1112
2222222222222222
1111111111111111
1111111111111111
0000000000000000`,
  ],
  [
    "s",
    bitmap`2222222222222222
2222222222222222
2222222222222222
2221000220001222
2210222002210122
2202111222221022
2202111122222022
2202L11122222022
22202LLL22220222
222202LL22202222
2222202L22022222
2222220220222222
2222222002222222
2222222222222222
2222222222222222
2222222222222222`,
  ],
  [
    "t",
    bitmap`2222222222222222
2222222222222200
22222222222200L2
221212222220L222
22212222220L2222
2222222222022222
2222222220L22222
2222222220112222
2222222220111122
2222220000L11111
222200L22L001111
2220L222222L0111
220L22222222L00L
2102222222222002
20L2222222222L00
2011222222221102`,
  ],
  [
    "u",
    bitmap`2222222222222222
2222222222222200
22222222222200L2
221212222220L222
22212222220L2222
2222222222022222
2222222220L22222
2222222220112222
2222222220111122
2222222220L11111
2222222222011111
22221212220L1111
222221222220000L
2122222222222202
22222222221111L0
2222222222222222`,
  ],
  [
    "v",
    bitmap`2011112222111102
20L1111111111L00
22011111111100L2
220L11111110L222
2220000LL00L2222
2222220220022222
221111L000L22222
2222222220112222
2222222220111122
2222221220L11111
2222211222011111
22122122220L1111
221122222220000L
2221222222222202
22222222221111L0
2222222222222222`,
  ],
  [
    "w",
    bitmap`02111111LLLLLL10
02111121LLLLLL10
02111221LLLLLL10
02111211LLLLLL10
02111111LLL1LL10
02111111LLL11L10
02111111L1LL1L10
02111111L11LLL10
02111111LL11LL10
02112111LLL1LL10
02122111LLLLLL10
02121111LLLLLL10
02111111LLLLLL10
02111111LLL1LL10
02111111LLL11L10
02111111LLLL1L10`,
  ],
  [
    "x",
    bitmap`02111111LLLLLL10
02111211LLLLLL10
02112211LLLLLL10
02122111LLLLLL10
02121111LLLLLL10
02111111LLLLLL10
02112111LL1LLL10
02122111LL11LL10
021211111LL1LL10
0211111LL1LLLL10
021111LLLL1LLL10
02111LL00LL1LL10
0211LL0220LL1L10
021LL022220LL110
02LL02222220LL10
0000222222220000`,
  ],
  [
    "y",
    bitmap`0122222222222210
0112222111222110
0112222111222110
0122222222222210
0122221121112210
0112222221112110
0112222222222110
0122222222222210
0122222222222210
0112211222222110
0112222222222110
0122112222222210
0122222222222210
0111111111111110
0111111111111110
L00000000000000L`,
  ],
  [
    "z",
    bitmap`2222222222222222
2222222222221122
2222222222222222
2222L000000L2222
2222011111102222
2222012222102222
1122012222102222
2222011111102222
2112012222102222
2222012222102222
2222011111102112
2222L000000L2222
2222222222222222
1111111111111111
1111111111111111
0000000000000000`,
  ],
  [
    "{",
    bitmap`2222222222222222
2222222222222222
2222222222222222
2221000220001222
2210222002220122
2202111221112022
2202111111112022
2202L111111L2022
22202LLLLLL20222
222202LLLL202222
2222202LL2022222
2222220220222222
2222222002222222
2222222222222222
2222222222222222
2222222222222222`,
  ],
  [
    "|",
    bitmap`2222222222222222
2222222222222222
2222221212222222
2222222122222222
2121222222222222
2212222222222222
2222222222222222
2222222222221212
2222222222222122
2222220000222222
222200L22L002222
2220L222222L0222
220L22222222L022
2202222222222022
20L2222222222L02
2011222222221102`,
  ],
  [
    "}",
    bitmap`2011112222111102
00L1111111111L00
2L001111111100L2
222L01111110L222
2222L00LL00L2222
2222200220022222
22222L0000L22222
2222110110112222
2211110110111122
11111L0000L11111
111100L22L001111
1110L222222L0111
L00L22222222L00L
2002222222222002
00L2222222222L00
2011222222221102`,
  ],
  [
    "~",
    bitmap`2011112222111102
20L1111111111L02
2201111111111022
220L11111111L022
2220000LL0000222
2222220220222222
221111L00L111122
2222222222222222
2222222222222222
2222221222222222
2222211222222222
2212212222121222
2211222222212222
2221222222222222
2222222222222222
2222222222222222`,
  ],
  [
    "¡",
    bitmap`2222222222222222
2200022222200022
2202022222202022
2201000000001022
2201L111111L1022
2201000000001022
2201022222201022
2201000000001022
2201L111111L1022
2201000000001022
2201022222201022
2201000000001022
2201L111111L1022
2201000000001022
2200011111100022
2222222222222222`,
  ],
  [
    "¢",
    bitmap`
................
................
................
................
................
..111L0000L111..
..111011110111..
..112012210211..
..111011110111..
..112012210211..
..111011110111..
..111L0000L111..
................
................
................
................`,
  ],
  [
    "£",
    bitmap`2222222222222220
2222222222222201
2222222121222011
2222222212220111
2222121222201111
2222212222011111
2212222220111111
2222222201111111
2122222011111111
2222220111111111
2222201111211211
2222011112212211
2220111122112111
2201111121111111
2021111111111111
0221111111111111`,
  ],
  [
    "¤",
    bitmap`0221111111111111
0221111111111121
0221111111111221
0221111111111211
0221111111111111
0221112111111111
0221122111111111
0221221121111111
0221211221111111
0221111211111111
0221111111111111
0221111111121111
0221111111221111
0221111111211111
0221111111111111
0221111111111111`,
  ],
  [
    "¥",
    bitmap`0221111111111111
022111111111111L
02211111211111LL
0221121221111LL0
022122121111LL02
02212111111LL022
0221111111LL0222
022111111LL02222
02211111LL022222
0221111LL0222222
022111LL02222222
02211LL022112222
0221LL0222222222
022LL02211122222
021L022211122222
0000222222222222`,
  ],
  [
    "¦",
    bitmap`2222222222222222
0022222222212122
2L00222222221222
222L022222222222
2222L02222222222
2222202222222222
22222L0221212222
2222110222122222
2211110222222222
11111L0000222222
111100L22L002222
1110L222222L0222
L00L22222222L022
2002222222222012
00L2222222222L02
2011222222221102`,
  ],
  [
    "§",
    bitmap`2222222222222222
0022222222222222
2L00222212222222
222L022211221222
2222L02221211222
2222202222212222
22222L0222222222
2222110222222222
2211110222221212
11111L0222222122
1111102222222222
1111L02222222222
L000022222121222
2022222222212222
0L11112222222222
2222222222222222`,
  ],
  [
    "¨",
    bitmap`2011112222111102
00L1111111111L02
2L00111111111022
222L01111111L022
2222L00LL0000222
2222200220222222
22222L000L111122
2222110222222222
2211110222222222
11111L0221212222
1111102222122222
1111L02222222222
L000022222222222
2022222222221212
0L11112222222122
2222222222222222`,
  ],
  [
    "©",
    bitmap`2222222222222222
2212122222222222
2221222222222222
2222222222121222
2222222222212222
2222222222222222
2000022222200002
2022022222202202
2022000000002202
2011L111111L1102
2011000000001102
2011000000001102
2011L111111L1102
2011000000001102
2000011111100002
2222222222222222`,
  ],
  [
    "ª",
    bitmap`2222222222222222
2222222222212222
2222222222222222
2222222221222122
2212122221122222
2221222222122222
2222222222222222
2222222222222222
2222222002212122
22222201L0221222
22222011LL022222
22220111LLL02222
22201121LLLL0222
22011221LLLLL022
20111211LLLLLL02
01111111LLLLLLL0`,
  ],
  [
    "«",
    bitmap`11111111LLLLLLLL
11121111LLLLLLLL
11221111LLLLLLLL
12211111LLLLLLLL
12111211LLLLLLLL
11112211LLLLLLLL
11112111LLLLLLLL
11111111LLLL1LLL
11111111LLLL11LL
11111111LL1LL1LL
11111111LL11LLLL
11111111LLL1LLLL
11111111LLLLLLLL
11111111LLLLLLLL
11111111LLLLLLLL
11111111LLLLLLLL`,
  ],
  [
    "¬",
    bitmap`11111111LLLLLLLL
11111111LLLLLLLL
11111111LLLLLLLL
11111111LLLLL1LL
11121111LLLLL11L
11221111LL1LLL11
11211111LL11LLL1
11111111LLL1LLLL
111111111LLLLLLL
1111111LL1LLLLLL
111111LLLL1LLLLL
11111LL00LL1LLLL
1111LL0220LL1LLL
111LL022220LL1LL
11LL02222220LL1L
1LL0222222220LL1`,
  ],
  [
    "­",
    bitmap`LL022222222220LL
L02222222222220L
0222222222222220
2222222222222222
2222211122222222
2112211122222222
2222222222222222
2221112211222222
2221112222222222
2222222222222222
2222222222222222
2222222221112222
2222222221112112
2222222222222222
2222222222211222
2222222222222222`,
  ],
  [
    "®",
    bitmap`2222222222222222
2222220000222222
222200L22L002222
2220L222222L0222
220L22222222L022
2202222222222022
20L2222222222L02
2011222222221102
2011112222111102
20L1111111111L02
2201111111111022
220L11111111L022
2220000LL0000222
2222220220222222
221111L00L111122
2222222222222222`,
  ],
  [
    "¯",
    bitmap`2222222222222222
2200000022212122
20L2222L02221222
0L222222L0222222
0122222210222222
0111221100000022
0L111110L2222L02
20L1110L222222L0
2200LL0122222210
2201220111221110
2200220L111111L0
211L00L0L1111L02
2222222200LL0022
2121222220220222
221222211L00L112
2222222222222222`,
  ],
  [
    "°",
    bitmap`2222222222222222
2222222002222222
22222201L0222122
21222011LL022222
22220111LLL02222
22201111LLLL0222
22021111LLLL1022
22021111LLLL1022
220211122LLL1022
2202112112LL1022
22021211112L1022
2202211001122022
2200111001110022
2210L110011L0122
2210000000000122
2222222222222222`,
  ],
  [
    "±",
    bitmap`2222222222222222
222222L00L221212
2222220220222122
2222L001100L2222
222201L11L102222
2222L002200L2222
2222220220222222
2222000220002222
222002L22L200222
2220L2L11L2L0222
2220122222210222
2120111111110222
222011LLLL110222
2220L111111L0222
2220000000000222
2222222222222222`,
  ],
  [
    "²",
    bitmap`0221111111111111
0221111111111111
0221000000000011
0221012222222L11
0221022222222L11
0221022222222L11
0221022222222L11
02210LLLLLLLL111
022102LLLLLL1111
022102LLLLL11211
02210LLLLL112211
022102LLL1122111
022102LL11121111
02210LL111111211
0221111111112211
0221111111112111`,
  ],
  [
    "³",
    bitmap`0222222222222222
L022222222222222
LL02222121222222
LLL0222212221222
LLLL022222222222
LL1LL02222222222
LL11LL0222222222
LLL1LLL022222222
LLLLLLLL02221212
LLLLLLLLL0222122
LLLLL1LLLL022222
LLLLL11LLLL02222
LLL1LL11LLLL0222
LLL11LL1LLLLL022
LLLL1LLLLLLLL102
LLLLLLLLLLLLL110`,
  ],
  [
    "´",
    bitmap`LLLLLLLLLLLLL110
LLLLLLLL1LLLL110
LLLLLLLL11LLL110
LLLLL1LLL11LL110
LLLLL11LLL1LL110
LLLLLL1LLLLLL110
LLLLLLLLLLLLL110
LLLLLLLLLLLLL110
LLLLLLLLLLLLL110
LLLLLLLLLLLLL110
LLLLLLLLLLLLL110
LL1LLLLLLLLLL110
LL11LLLLL1LLL110
LLL11LLLL11LL110
LLLL1LLLLL1LL110
LLLLLLLLLLLLL110`,
  ],
  [
    "µ",
    bitmap`1LLLLLLLLLLLL110
L1LLLLL1LLLLL110
LL1LLLL11LLLL110
0LL1LLLL1LLLL110
20LL1LLLLLLLL110
220LL1LLLLLLL110
2220LL1LLLLLL110
22220LL1LLLLL110
222220LL1LLLL110
2112220LL1LLL110
22222220LL1LL110
221122220LL1L110
2222222220LL1110
22222222220LL110
222222211220LL10
2222222222220000`,
  ],
  [
    "¶",
    bitmap`2222200000022222
22200L2222L00222
220L22222222L022
20L2222222222L02
2022222222222202
0L222222222222L0
0112222222222110
0111122222211110
0L111111111111L0
2011111111111102
20L1111111111L02
22000L1111L00022
222220L22L022222
2222002222002222
2222010220102222
2111L0L00L0L1112`,
  ],
  [
    "·",
    bitmap`2222222222222222
2222222002222222
2122220LL0222222
2222000LL0002222
2220L111111L0222
220111L11L111022
220L00011000L022
2200200110020022
2222220LL0222222
2222220220222222
222222L011022222
2212122022022222
2222220110L22122
2222220220222222
222211L00L112222
2222222222222222`,
  ],
  [
    "¸",
    bitmap`2222222222222222
2222200000022222
2122021111102222
22201211111L0222
22011211111LL022
20111211111LLL02
02111211111LLL10
02111211111LLL10
02111222222LLL10
021121111112LL10
0212111111112L10
0221001001001220
0011001001001100
10L1111001111L01
1000000000000001
2222222222222222`,
  ],
  [
    "¹",
    bitmap`2222222222222222
2222220000222222
2212220220222222
2222000110002222
2222022112202222
2222011111102222
2222000110002121
2222220110222212
2222000110002222
2220L22LL22L0222
2220222222220222
222021LLLL120222
2220112222110222
2120111111110222
2220111111110222
222L00000000L222`,
  ],
  [
    "º",
    bitmap`LLLLLLLLLLLLL110
LLLLLLLLLLLLL110
LL0000000000L110
LL1LLLLLLL00L110
LL1LLLLLLLL0L110
LL1LLLLLLLL0L110
LL1LLLLLLLL0L110
LLL111111110L110
LLLL11111120L110
LLLLL1111120L110
LLLLLL111110L110
LL1LLLL11120L110
LL11LLLL1120L110
LLL1LLLLL110L110
LLLLLLLLLLLLL110
LLLLLLLLLLLLL110`,
  ],
  [
    "»",
    bitmap`0221111111111111
022111111111111L
02211111211111LL
0221121221111LL0
022122121111LL02
02212111111LL022
0221111111LL0222
022111111LL02222
02211111LL021122
0221111LL0222222
022111LL02111222
02211LL022111222
0221LL0222222222
022LL01111111111
021L011111111111
0000000000000000`,
  ],
  [
    "¼",
    bitmap`LL022222222220LL
L02211222222220L
0222222222222220
2222222222222222
2222222222111222
2222222112111222
2222222222222222
2222112211122222
2222222211122222
2222222222221122
2222222222222222
2112222222222222
2222222222222222
1111111111111111
1111111111111111
0000000000000000`,
  ],
  [
    "½",
    bitmap`0122222222222210
0112222221122110
0112222222222110
01222L0000L22210
0122201111022210
0112201221022110
0112201111022110
0122201221022210
0122201111022210
01122L0000L22110
0112211111122110
0122222222222210
0122222222222210
0111111111111110
0111111111111110
L00000000000000L`,
  ],
  [
    "¾",
    bitmap`2222222222222222
2222200000022222
22220L2222L02222
2220222222220222
220L22222222L022
2201122222211022
2201111221111022
220L11111111L022
2220L111111L0222
2222000LL0002222
2222220221022222
2222200220022222
2222201220222222
2222200220222222
222111L00L111222
2222222222222222`,
  ],
  [
    "¿",
    bitmap`2222222222222222
22222L0000L22222
222220L11L022222
2212201111022222
22222021110L00L2
2L00L01111001102
2011001112002102
2021001111L11102
20111L2111L11L02
20L11L11110000L2
2L00001112022222
2222201111022212
2222202111022222
2122201111022222
22211L0000L11222
2222222222222222`,
  ],
  [
    "À",
    bitmap`2222222222222222
2222222002222222
2222220210222222
2222201222022222
2222022211102222
2122012222102222
2220111222220222
2202222222222022
2201222222221022
20L1112222111L02
2011111001111102
20L1110000111L02
210L11000011L012
21100L0000L00112
2221100000011222
2222222222222222`,
  ],
  [
    "Á",
    bitmap`2222222222222222
2222222222222222
2222221212212222
2212222122222222
2222222222222222
2222200000022222
2222022222202222
2220222222220222
2220211111120222
222011LL1L110222
2220112212110222
222011L1LL110222
2220112122110212
2220111111110222
2220111111110222
222L00000000L222`,
  ],
  [
    "Â",
    bitmap`2222222222222222
2222222222222222
22L0000000000L22
2200000000000022
2200000000011022
2200000011011022
22000LL011011022
22000LL011011022
2200011022022022
2200011022022022
2200011022022022
2200011022022022
2200011022022022
22L0000000000L22
2222222222222222
2222222222222222`,
  ],
  [
    "Ã",
    bitmap`1LLLLLLLLLLLL110
L1LLLLL1LLLLL110
LL1LLLL11LLLL110
0LL1LLLL1LLLL110
20LL1LLLLLLLL110
220LL1LLLLLLL110
2220LL1LLLLLL110
22220LL1LLLLL110
221120LL1LLLL110
2222220LL1LLL110
21122220LL1LL110
222222220LL1L110
2222222220LL1110
11111111110LL110
111111111110LL10
0000000000000000`,
  ],
  [
    "Ä",
    bitmap`LL022222222220LL
L02222222211220L
0222222222222220
2222000000002222
2220222222220222
2202211111122022
2202122222212022
2202122222212022
2102122222212022
22021111111L2022
220222222LL12022
22021111111L2022
2202122222212022
1102111111112011
1102222222222011
0000000000000000`,
  ],
  [
    "Å",
    bitmap`2222222222222222
2222222222222222
2200000000000022
20L2222222222L02
202L11111111L202
202L11111111L202
202L11111111L202
202L11111111L202
2012222222222102
2021112LL2111202
202L112LL211L202
2021111111111202
20L2222222222L02
2000000000000002
2222222222222222
2222222222222222`,
  ],
  [
    "Æ",
    bitmap`2222222002222222
2222220110222222
2222220110222222
222220L11L022222
2222202112022222
2222202222022222
22220L1221L02222
2222011111102222
2220211111120222
2220222222220222
2201122222211022
220L11111111L022
22200L1111L00222
2222200LL0022222
2222220220222222
222111L00L111222`,
  ],
  [
    "Ç",
    bitmap`2L0L22222222L0L2
L0L0L222222L0L0L
0LLL02L00L20LLL0
01110L0L10L01110
010100L121001010
01010L1122101010
0111011122201110
01L1011LL2201L10
0LLL01L11L20LLL0
0111LL1111LL1110
0101L111111L1010
0101L110011L1010
0111L220022L1110
0222000000002220
0000011111100000
2222222222222222`,
  ],
  [
    "È",
    bitmap`2222222222222222
2222222002222222
2121220220222222
222220L21L022122
22220L2212L02222
2220LL2211LL0222
220LL222112LL022
20LLL222111LLL02
20LL22221112LL02
20LL22221111LL02
20L2222211112L02
20L2222001111L02
2022222001111202
2022222001111102
2L000000000000L2
2222222222222222`,
  ],
  [
    "É",
    bitmap`2222222222222222
2222222222222222
2222220000222222
2200000LL0000022
220L11111111L022
2201111111111022
22011LLLLLL11022
2201111111111022
22011LLLLLL11022
2201111111111022
220L11111111L022
2200000LL0000022
2222220110222222
2222220110222222
221111L00L111122
2222222222222222`,
  ],
  [
    "Ê",
    bitmap`
................
................
................
................
..........000...
.........01L0...
........0L110...
...00000LL000...
...0122LL0220...
...022LL01110...
...0222222220...
...0111111110...
...0L111111L0...
...0000000000...
................
................`,
  ],
  [
    "Ë",
    bitmap`
................
................
................
................
...000..........
...0L10.........
...011L0........
...000LL00000...
...0220LL2210...
...01110LL220...
...0222222220...
...0111111110...
...0L111111L0...
...0000000000...
................
................`,
  ],
  [
    "Ì",
    bitmap`2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222220L22222
22L0L22201022222
2L010000100000L2
2021212121212202
2011121212122102
2011111111112202
2L0L0000000000L2
22L0L11111111112
2222222222222222
2222222222222222
2222222222222222
2222222222222222`,
  ],
  [
    "Í",
    bitmap`2222222222222222
2222222222222222
2222222222222222
22222L0000L22222
2222L011110L2222
222201LLLL102222
222201LLLL102222
2222001111002222
222L01LLLL10L222
2220111112210222
2220111112210222
2220111111110222
2222011111102222
2222211111122222
2222222222222222
2222222222222222`,
  ],
  [
    "Ð",
    bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`,
  ],
  [
    "Ñ",
    bitmap`.......00.......
.....0000000....
....0033333000..
....0333333330..
....03333000000.
....033307777770
....033307777770
....033307777700
...003333000000.
...033333333330.
...033333333330.
...033330333330.
..0033330333300.
..033330033330..
..000330.00330..
....0000..0000..`,
  ],
  [
    "Ò",
    `
....C.CCCC.C....
....CCCCCCCC....
....CCCCCCCCC...
...CC0CC0CCCC...
...CCCCCCCCCCC..
...CCC00CCCCCCC.
...C0C0CC0CCCCC.
...CC0000CCCCCC.
...CCCCCCCCCCCC.
...CCCCCCCCCCCC.
...CCCCCCCCCCCC.
...CCCCCCCCCCCC.
....CCCCCCCCCCC.
....CC..CC...CC.
....CC..CC...CC.
....C...C....C..
`,
  ],
];

let screen = new MapStr(BLANK_SCREEN);
let triggerMoveInterval = undefined;
let roomKey, room, player, camera;
let questText = "QUEST: Find Kara!";
let fullscreen = false;
let modal = false;

const startGame = async () => {
  setRoom("outside", [2, 8]);

  await textWall(
    " It's your first    \n" +
      " day working at     \n" +
      " Hack Club HQ,      \n" +
      "                    \n" +
      " and you can't      \n" +
      " wait to start.     \n" +
      "                    \n" +
      " ...                \n" +
      "                    \n" +
      " First, find Kara!  \n"
  );
}

(async () => {
  setRoom("outside", [2, 8]);
  setAfterInput(render);
  setInterval(renderText, 100);

  if (true) {
    /* teleport to outside of HQ */
    // setRoom("outside", [10,8]);

    /* outside bank near sign */
    // setRoom("outside", [2, 8]);

    /* outside near CStore */
    // openZachDialogue();
  findFnsTrigger(karaYouLate).active = 0;
  findFnsTrigger(zachYouLate).active = 1;
  const [karaPos] = [...rooms.hq[1].positionsOf(sprites.kara)];
  rooms.hq[1].write(...karaPos, sprites.max);

    // openTombOf1kTriggers();
    // await openTombOf1kTriggers();

    // tombOf1kTriggers();
    if (false)
      await startGame();
  } else {
    /* teleport to call room start */
    // setRoom("callRoom", doormat(callRoomToHq));

    findFnsTrigger(karaTakeThis).active = 0;
    findFnsTrigger(karaYouLate).active = 0;
    findFnsTrigger(karaDidZachVent).active = 1;
    setRoom("hq", doormat(hqToCallRoom));
  }

  onInput("w", () => !modal && movePlayer(0, -1));
  onInput("s", () => !modal && movePlayer(0, 1));
  onInput("a", () => !modal && movePlayer(-1, 0));
  onInput("d", () => !modal && movePlayer(1, 0));
})();

async function bankFlipSwitch(b4Pos) {
  modal = true;

  fullscreen = 0;
  movePlayer(b4Pos[0] - player[0], b4Pos[1] - player[1]);
  render();
  await new Promise((res) => setTimeout(res, 1600));

  clearInterval(triggerMoveInterval);

  room[2].write(...switchPos, sprites.switchOff), render();
  await new Promise((res) => setTimeout(res, 2000));
  room[2].write(...switchPos, sprites.switch), render();
  await new Promise((res) => setTimeout(res, 1600));

  setRoom("outside", doormat(outsideToCave));
  fullscreen = 0;

  await textWall(
    " Great work! Bank's \n" +
      " working great now, \n" +
      " ...                \n" +
      "   ... mostly ...   \n"
  );
  await textWall(
    " By the way, do you \n" +
      " know what Zach's   \n" +
      " up to? I saw him   \n" +
      " behind the country \n" +
      " store with a cargo \n" +
      " truck full of HC   \n" +
      " merch and an       \n" +
      " industrial drum of \n" +
      " coffee!            \n"
  );

  openZachDialogue();

  modal = false;
}

function openZachDialogue() {
  findFnsTrigger(zachAtCStore).active = 1;
  findFnsTrigger(doorLockedCStore).active = 0;
}

async function zachAtCStore(b4Pos) {
  const p = [...player];
  modal = 1;
  movePlayer(b4Pos[0] - p[0], b4Pos[1] - p[1]);
  render();
  await new Promise(res => setTimeout(res, 500));
  movePlayer(b4Pos[0] - p[0], b4Pos[1] - p[1]);
  render();
  await new Promise(res => setTimeout(res, 1000));
  room[1].write(...b4Pos, sprites.max);
  render();

  await new Promise(res => setTimeout(res, 1000));

  await textWall(
    " There you are! I   \n" +
    " need your help!    \n" +
    "                    \n" +
    " I've found the best\n" +
    " way to make HC more\n" +
    " popular.           \n" +
    "                    \n" +
    " Coding is too hard.\n" +
    " People don't like  \n" +
    " it. But coffee?    \n" +
    "                    \n" +
    " Everyone loves it! \n"
  );

  await textWall(
    " So I'm changing my \n" +
    " name to Zach Latte!\n" +
    "                    \n" +
    " We'll be known     \n" +
    " everywhere!        \n" +
    "                    \n" +
    " You can help me    \n" +
    " break the news ... \n" +
    "                    \n" +
    " You don't seem so  \n" +
    " enthusiastic.      \n"
  );

  await textWall(
    " It's great to meet \n" +
    " you, finally, Zach!\n" +
    "                    \n" +
    " But, fundamentally \n" +
    " changing what HC is\n" +
    " to make it more    \n" +
    " popular doesn't do \n" +
    " the world any good!\n" +
    "                    \n" +
    " By trying to be    \n" +
    " everything to      \n" +
    " everyone, you      \n" +
    " become nothing     \n" +
    " to no one.         \n"  
  );

  await textWall(
    " ...                \n" +
    "                    \n" +
    " Haha, just kidding.\n" +
    "                    \n" +
    " This fever dream   \n" +
    " has been too brain \n" +
    " dead to pull off   \n" +
    " messaging like that\n" +
    "                    \n" +
    " ...                \n" +
    "                    \n" +
    " So what really     \n" +
    " happened on your   \n" +
    " first day?         \n"  
  );

  render();
  await new Promise(res => setTimeout(res, 1000));

  screen = new MapStr(map`
...
...
...`);
  camera[0]++;
  camera[1]++;
  render();
  await new Promise(res => setTimeout(res,  700));

  screen = new MapStr(map`
.`);
  camera[0]++;
  camera[1]++;
  render();
  await new Promise(res => setTimeout(res,  700));

  screen = new MapStr(BLANK_SCREEN);
  resetTriggers();
  resetRooms();
  findFnsTrigger(karaYouLate).active = 0;
  findFnsTrigger(zachYouLate).active = 1;

  const [karaPos] = [...rooms.hq[1].positionsOf(sprites.kara)];
  rooms.hq[1].write(...karaPos, sprites.max);

  await startGame();

  modal = 0;
}

let enemies = 10;
async function tombOf1kTriggers() {
  const startPos = [0, ~~(rooms.bank[0].height / 2)];
  setRoom("bank", startPos);

  console.log("HMMM, here");
  fullscreen = 1;

  if (triggerMoveInterval != undefined) clearInterval(triggerMoveInterval);
  triggerMoveInterval = setInterval(async () => {
    if (room != rooms.bank) {
      clearInterval(triggerMoveInterval);
      triggerMoveInterval = undefined;
    }
    const triggersB4 = [...room[2].positionsOf(sprites.trigger)];
    for (const p of room[2].positionsOf(sprites.trigger))
      room[2].write(...p, ".");

    for (let i = 0; i < enemies; i++) {
      const tri = (t) => 1 - 2 * Math.abs(0.5 - (t % 1.0));
      const D = 600;
      const T = D * 5;
      const now = Date.now() + i * (D * (3 / 2));
      let ty = (tri(now / T) % 1) * 5;
      let tx = (((now / T / 9) * 3) % 1) * 9;
      const x = 1 + ~~tx;
      const y = 1 + ~~ty;
      room[2].write(x, y, sprites.trigger);
      if (room[1].read(x, y) == sprites.player) {
        // room[1].write(x, y, ".");
        // room[1].write(...startPos, sprites.player);

        clearInterval(triggerMoveInterval);

        modal = true;
        fullscreen = 0;
        for (const p of triggersB4) room[2].write(...p, sprites.trigger);
        render();

        await new Promise((res) => setTimeout(res, 1000));

        const state = await triggerBattle();
        const won = state.you.hp > 0;

        modal = false;

        if (won) {
          tombOf1kTriggers();

          movePlayer(0, 0);
          enemies *= 0.8;
        } else {
          findFnsTrigger(karaYouBlackedOut).active = 1;
          findFnsTrigger(karaTakeThis).active = 0;
          findFnsTrigger(karaYouLate).active = 0;
          findFnsTrigger(karaHealUrMonz).active = 0;
          fullscreen = 0;

          setRoom("hq", doormat(hqToOutside));
          enableHealUrMonzLater();
          findFnsTrigger(tombOf1kTriggers).active = 1;
          return;
        }
        break;
      }
    }
    render();
  });
}

async function ellaInteract(b4Pos) {
  movePlayer(b4Pos[0] - player[0], b4Pos[1] - player[1]);
  await textWall(
    " ...                \n" +
      "                    \n" +
      "                    \n" +
      " ...                \n" +
      "                    \n" +
      "                    \n" +
      " ...                \n" +
      "                    \n" +
      "                    \n"
  );
  findFnsTrigger(ellaInteract).active = 1;
}

async function openTombOf1kTriggers() {
  rooms.outside[1].write(...signPos, sprites.max);
  rooms.outside[2].write(...ellaPos, sprites.kara);
  render();

  findFnsTrigger(ellaInteract).active = 1;

  findFnsTrigger(maxBankNeedsRestart).active = 1;
}

async function karaHealUrMonz() {
  await textWall(
    " You want me to heal\n" +
      " the innocent beings\n" +
      " you've been irres- \n" +
      " -ponsibly torturing\n" +
      " in a lawless cock- \n" +
      " fighting ring?     \n" +
      "                    \n" +
      " ...                \n" +
      "                    \n" +
      " Sure thing.        \n"
  );

  enableHealUrMonzLater();
}

async function enableHealUrMonzLater() {
  const checkIfLeft = setInterval(() => {
    if (roomKey == "hq") return;
    clearInterval(checkIfLeft);
    findFnsTrigger(karaHealUrMonz).active = 1;
  }, 100);
}

async function karaYouBlackedOut() {
  modal = 1;

  await textWall(
    " All of your 'monz  \n" +
      " were defeated.     \n" +
      "                    \n" +
      " ...                \n" +
      "                    \n" +
      " You make it back to\n" +
      " HQ in a foggy haze \n" +
      " and collapse.      \n" +
      "                    \n" +
      " Hours later, you're\n" +
      " awoken by Kara.    \n"
  );

  await textWall(
    " By some miracle,   \n" +
      " your spriggymonz   \n" +
      " are breathing again\n" +
      "                    \n" +
      " ...                \n" +
      "                    \n" +
      " So you're equipped \n" +
      " to return to what- \n" +
      " -ever irresponsibly\n" +
      " dangerous escapade \n" +
      " I'm sure you embar-\n" +
      " -assingly failed.  \n"
  );

  modal = 0;
}

async function maxBankNeedsRestart() {
  let roomKeyAtStart = roomKey;
  let playerPosAtStart = [...player];

  await textWall(
    " Hullo.             \n" +
      " You must be the    \n" +
      " new member of HQ!  \n" +
      "                    \n" +
      " Well,              \n" +
      " you're in for some \n" +
      " first day, alright!\n" +
      "                    \n" +
      " It's the Tomb of a \n" +
      " Thousand Triggers  \n" +
      " in there!          \n"
  );

  const switchToBank = async (t = 0) => {
    fullscreen = true;
    await tombOf1kTriggers();
    modal = 1;
    setAfterInput(() => {});
    await new Promise((res) => setTimeout(() => setAfterInput(res), t));
    clearInterval(triggerMoveInterval);
  };

  await switchToBank();

  await textWall(
    " Sorry, context:    \n" +
      " Trigger is         \n" +
      " something of an    \n" +
      " unofficial mascot, \n" +
      "                    \n" +
      " But I don't know   \n" +
      " what's gotten into \n" +
      " him today!         \n" +
      "                    \n" +
      " He's gone crazy!   \n"
  );

  await textWall(
    " And cherry on top: \n" +
      " Bank's gone down!  \n" +
      "                    \n" +
      " I can't get to the \n" +
      " lever to redeploy  \n" +
      " the codebase,      \n" +
      "                    \n" +
      " for fear of getting\n" +
      " my face bitten off!\n"
  );

  let leverAnim = true;
  (async () => {
    setTimeout(() => clearInterval(triggerMoveInterval), 150);
    for (let i = 0; i < 10; i++) {
      rooms.bank[2].write(...switchPos, "."), render();
      await new Promise((res) => setTimeout(res, 200));

      rooms.bank[2].write(...switchPos, sprites.switch);
      if (!leverAnim) return; /* so you don't delete it */
      render();

      await new Promise((res) => setTimeout(res, 800));
      if (!leverAnim) return;
    }
  })();
  await switchToBank(600);
  leverAnim = false;

  await textWall(
    " You look like you  \n" +
      " might be           \n" +
      " expendable, wanna  \n" +
      " give it a shot?    \n" +
      "                    \n" +
      " ...                \n" +
      "                    \n" +
      " Do it, I dare you! \n"
  );

  fullscreen = 0;
  setRoom(roomKeyAtStart, playerPosAtStart);
  findFnsTrigger(doorLockedBank).active = 0;
  findFnsTrigger(tombOf1kTriggers).active = 1;

  modal = false;
  if (room) render();
}

async function textWall(text) {
  const modalb4 = modal;
  modal = true;
  screen = new MapStr(BLANK_SCREEN);
  screen.set();

  let i = 0;
  const renderText = () => {
    clearText();
    addText("any key to continue", { x: 1, y: 14, color: "1" });
    addText(text.slice(0, i), { x: 0, y: 2 });
  };

  setAfterInput(() => {
    i = text.indexOf("\n", i + 1);
    renderText();
  });
  for (; i < text.length; i++) {
    renderText();
    if (!["\n", " "].includes(text[i]))
      await new Promise((res) => setTimeout(res, 80));
  }
  await new Promise((res) => setAfterInput(res));
  clearText();

  modal = modalb4;

  render();
  setAfterInput(render);
}

async function animateSpriteMarch(sprite, goal, opts = {}) {
  const o = Object.assign({ axis: 0, speed: 600, pauseAfter: 800 }, opts);

  const grid = room[1];
  const [kara] = [...grid.positionsOf(sprite)];

  const delta = Math.sign(goal[o.axis] - kara[o.axis]);
  for (let x = kara[o.axis]; x != goal[o.axis]; x += delta) {
    grid.write(...kara, ".");
    kara[o.axis] = x;
    grid.write(...kara, sprite);
    render();
    await new Promise((res) => setTimeout(res, o.speed));
  }

  await new Promise((res) => setTimeout(res, o.pauseAfter));
}

async function doorLockedCStore() {
  modal = true;

  await textWall(
    " It's locked!       \n" +
      "                    \n" +
      " Besides, you       \n" +
      " don't want to be   \n" +
      " late on your first \n" +
      " day!               \n"
  );
  movePlayer(0, 1);

  modal = false;
  if (room) render();

  findFnsTrigger(doorLockedCStore).active = 1;
}

async function doorLockedBank() {
  modal = true;

  await textWall(
    " It's locked!       \n" +
      "                    \n" +
      " Besides, you       \n" +
      " don't want to be   \n" +
      " late on your first \n" +
      " day!               \n"
  );
  movePlayer(0, 1);

  modal = false;
  if (room) render();

  findFnsTrigger(doorLockedBank).active = 1;
}

async function zachYouLate() {
  modal = true;

  const [zachPos] = [...rooms.hq[1].positionsOf(sprites.max)];
  await animateSpriteMarch(sprites.player, zachPos);
  // await animateSpriteMarch(sprites.player, zachPos, { axis: 1 });
  [player] = [...room[1].positionsOf(sprites.player)];

  await textWall(
    " There you are!     \n" +
    " Where have you     \n" +
    " been!?             \n" +
    " We've been waiting!\n"
  );
  modal = 1;

  render();
  await new Promise(res => setTimeout(res, 1000));

  screen = new MapStr(map`
...
...
...`);
  camera[0]++;
  // camera[1]++;
  render();
  await new Promise(res => setTimeout(res,  700));

  screen = new MapStr(map`
.`);
  camera[0]++;
  camera[1]++;
  render();
  modal = 1;
  await new Promise(res => setTimeout(res,  700));

  screen = new MapStr(map`
.`);
  screen.set();

  questText = "THE END";
  await new Promise();

  // modal = false;
  // if (room) render();
}

async function karaYouLate() {
  modal = true;

  await animateSpriteMarch(sprites.kara, player);

  await textWall(
    " There you are! I   \n" +
      " hope you don't plan\n" +
      " on making a habit  \n" +
      " of being late!     \n" +
      "                    \n" +
      " Zach's waiting for \n" +
      " you in a call room \n" +
      " upstairs. Hurry up!\n" +
      "                    \n" +
      " Get upstairs!      \n"
  );

  modal = false;
  if (room) render();
}

async function karaTakeThis() {
  modal = true;

  await animateSpriteMarch(sprites.kara, player);

  await textWall(
    " One last thing,    \n" +
      " part of your duties\n" +
      " here at HQ will be \n" +
      " safekeeping this   \n" +
      " repulsive-looking  \n" +
      " dinosaur, Orpheus. \n" +
      "                    \n" +
      " Treat her well! I  \n" +
      " don't want to see  \n" +
      " her taught to      \n" +
      " fight with strays! \n"
  );

  modal = false;
  if (room) render();
}

async function heyThatsZachsDesk() {
  modal = true;

  await new Promise((res) => setTimeout(res, 400));
  await textWall(
    " Hey look, that's   \n" +
      " Zach's desk! You've\n" +
      " seen pictures of it\n" +
      " in the Slack.      \n" +
      "                    \n" +
      " It's still warm,   \n" +
      " and smells vaguely \n" +
      " of coffee.         \n"
  );

  modal = false;
  if (room) render();
}

async function wasabiGonFiteU() {
  modal = true;

  await animateSpriteMarch(sprites.ghost, above(player), {
    axis: 1,
    pauseAfter: 0,
  });
  await animateSpriteMarch(sprites.ghost, above(player), { axis: 0 });

  await textWall(
    " Oh look, it's that \n" +
      " dog Kara keeps     \n" +
      " around, Wasabi!    \n" +
      "                    \n" +
      " <growls menacingly>\n" +
      "                    \n" +
      " Uh ...             \n" +
      " I think I might've \n" +
      " left some food in  \n" +
      " my pocket ...      \n"
  );

  await wasabiBattle();
  setRoom(roomKey, player);
  clearText();

  const corner = doormat(callRoomToCloset);
  await animateSpriteMarch(sprites.ghost, corner, {
    pauseAfter: 0,
    speed: 200,
  });

  await Promise.all([
    animateSpriteMarch(sprites.chest, [corner[0] + 2, corner[1]], {
      speed: 200,
    }),
    animateSpriteMarch(sprites.ghost, [corner[0] + 1, corner[1]], {
      speed: 200,
    }),
  ]);
  await animateSpriteMarch(sprites.ghost, [corner[0], corner[1] + 2], {
    speed: 500,
    axis: 1,
  });
  await animateSpriteMarch(sprites.ghost, [player[0] - 1, player[1]], {
    speed: 500,
    axis: 0,
  });
  await animateSpriteMarch(sprites.player, [player[0] + 2, player[1]], {
    speed: 100,
    axis: 0,
  });
  [player] = [...room[1].positionsOf(sprites.player)];
  await animateSpriteMarch(sprites.ghost, callRoomToHq, {
    speed: 200,
    axis: 1,
  });
  const [ghost] = [...room[1].positionsOf(sprites.ghost)];
  room[1].write(...ghost, "."), render();
  await new Promise((res) => setTimeout(res, 1500));
  room[1].write(...ghost, sprites.kara), render();
  await new Promise((res) => setTimeout(res, 1000));

  await textWall(
    " What's all the     \n" +
      " ruckus going on up \n" +
      " here?              \n" +
      "                    \n" +
      "   Oh, no! Poor     \n" +
      "  Orpheus! Let me   \n" +
      "   patch her up!    \n" +
      "                    \n" +
      " If she ever gets   \n" +
      " like this again,   \n" +
      " just come to me,   \n" +
      "        ok?         \n"
  );

  room[1].write(...ghost, "."), render();
  await new Promise((res) => setTimeout(res, 500));

  findFnsTrigger(karaDidZachVent).active = 1;

  modal = false;
  if (room) render();
}

async function pushCobwebs() {
  modal = true;

  await textWall(
    " That chest Wasabi  \n" +
      " knocked out of the \n" +
      " way must've been   \n" +
      " there for quite a  \n" +
      " while!             \n" +
      "                    \n" +
      " The door is caked  \n" +
      " in a layer of dust \n" +
      " and cobwebs, but   \n" +
      " unlocked!          \n"
  );
  findDoorAtPos(player).active = 1;
  movePlayer(0, 1);

  modal = false;
  if (room) render();
}

async function karaDidZachVent() {
  modal = true;

  await new Promise((res) => setTimeout(res, 400));
  await textWall(
    " There you are!     \n" +
      "                    \n" +
      " I just realized,   \n" +
      " Zach wasn't up     \n" +
      " there with you,    \n" +
      " and I never saw    \n" +
      " him leave ...      \n" +
      "                    \n" +
      " I mean seriously,  \n" +
      " Did he vent or     \n" +
      " something!?!       \n"
  );

  await new Promise((res) => setTimeout(res, 800));

  /* spawn vent */
  rooms.hq[1].write(...hqHiddenVent, sprites.vent);
  render();
  findFnsTrigger(amogusGonFiteU).active = 1;

  await new Promise((res) => setTimeout(res, 800));
  await textWall(
    " Is it just me or   \n" +
      " ...                \n" +
      " that vent wasn't   \n" +
      " there before,      \n" +
      " right?             \n" +
      "                    \n" +
      " that's   ...       \n" +
      "                    \n" +
      " a tad, erm, sus.   \n"
  );

  modal = false;
  if (room) render();
}

async function amogusGonFiteU() {
  modal = true;

  await new Promise((res) => setTimeout(res, 1000));

  rooms.hq[2].write(...hqHiddenVent, sprites.amogus);
  render();

  await new Promise((res) => setTimeout(res, 2500));

  await textWall(
    "  did somebody call \n" +
      "       for an       \n" +
      " EMERGENCY MEETING? \n"
  );

  await amogusBattle();
  setRoom(roomKey, player);
  clearText();

  await new Promise((res) => setTimeout(res, 500));
  rooms.hq[2].write(...hqHiddenVent, "."), render();
  await new Promise((res) => setTimeout(res, 200));
  rooms.hq[2].write(...hqHiddenVent, sprites.amogus), render();
  await new Promise((res) => setTimeout(res, 100));
  rooms.hq[2].write(...hqHiddenVent, "."), render();
  await new Promise((res) => setTimeout(res, 500));

  await animateSpriteMarch(sprites.kara, doormat(player), {
    speed: 500,
    axis: 1,
  });

  await textWall(
    " Wh. What the shit? \n" +
      "                    \n" +
      " Like, who even is  \n" +
      " the imposter at    \n" +
      " this point?        \n" +
      "                    \n" +
      " Zach vented ...    \n" +
      "                    \n" +
      " but I just saw you \n" +
      " kill a crewmate... \n"
  );
  await textWall(
    " I mean... whatever.\n" +
      "                    \n" +
      " Zach's Calendar    \n" +
      " puts him in a cold \n" +
      " inhospitable cave, \n" +
      " the Bank office.   \n" +
      "                    \n" +
      " Find him so you can\n" +
      " start your 1st day!\n"
  );
  questText = "QUEST: Find Bank!";

  openTombOf1kTriggers();

  enableHealUrMonzLater();

  modal = false;
  if (room) render();
}

async function oldManGonFiteU() {
  modal = true;

  await new Promise((res) => setTimeout(res, 400));
  await textWall(
    " Listen here, kid!  \n" +
      "                    \n" +
      " I been livin' in   \n" +
      " this here closet   \n" +
      " afore you was even \n" +
      " borned, ya hear me?\n" +
      "                    \n" +
      " I think it's high  \n" +
      " time I gave a      \n" +
      " whippersnapper an  \n" +
      " ass whoopin!       \n"
  );

  await oldManBattle();
  setRoom(roomKey, player);
  clearText();

  await new Promise((res) => setTimeout(res, 500));
  rooms.closet[1].write(2, 2, "."), render();
  await new Promise((res) => setTimeout(res, 200));
  rooms.closet[1].write(2, 2, sprites.oldMan), render();
  await new Promise((res) => setTimeout(res, 100));
  rooms.closet[1].write(2, 2, "."), render();
  await new Promise((res) => setTimeout(res, 500));

  modal = false;
  if (room) render();
}

function setRoom(_roomKey, where) {
  if (player) room[1].write(...player, ".");
  room = rooms[_roomKey];
  roomKey = _roomKey;

  player = where;
  room[1].write(...player, sprites.player);
  camera = [0, 0];

  setLegend(
    ...tiles.sort(([a], [b]) => {
      const layerForChar = (c) => {
        if (c in offMapLayerLivers) {
          if (typeof offMapLayerLivers[c] == "number")
            return offMapLayerLivers[c];
          else return offMapLayerLivers[c][roomKey];
        }
        return room.findIndex((layer) => layer.arr.includes(c));
      };
      return layerForChar(b) - layerForChar(a);
    })
  );
  render();

  movePlayer(0, 0); /* adjust cam lol */
}

function movePlayer(...dir) {
  const contains = (outer, inner) => {
    for (let i = 0; i < 2; i++) {
      if (inner.min[i] < outer.min[i]) return false;
      if (inner.max[i] > outer.max[i]) return false;
    }
    return true;
  };

  const mapBounds = { min: [0, 0], max: [room[0].width, room[0].height] };
  const clampedMove = (pos, dir, size) => {
    const newP = [pos[0] + dir[0], pos[1] + dir[1]];
    const small = {
      min: newP,
      max: [newP[0] + size[0], newP[1] + size[1]],
    };

    return contains(mapBounds, small) ? newP : pos;
  };

  const playerPush = (dir) => {
    const p = clampedMove(player, dir, [1, 1]);
    if (room[1].read(...p) != ".") return player;

    return p;
  };
  const playerPosB4 = [...player];
  room[1].write(...player, ".");
  player = playerPush(dir);
  room[1].write(...player, sprites.player);

  /* teleport player if walked into door */
  const door = doors.find((d) => {
    if (!d.active) return false;
    return d.pos[roomKey] + "" == "" + player;
  });
  if (door) {
    const [newRoom] = Object.keys(door.pos).filter((x) => x != roomKey);
    const doormat = [...door.pos[newRoom]];
    doormat[1]++;
    setRoom(newRoom, doormat);
    return;
  }

  const camSize = [screen.width, screen.height];
  const idealCameraPos = [
    player[0] - ~~(screen.width / 2),
    player[1] - ~~(screen.height / 2),
  ];
  const camPush = (x, y) => {
    const camb4 = [...camera];
    camera = clampedMove(camera, [x, y], camSize);
    if (camb4 + "" != "" + camera) return true;
  };
  while (
    (camera[0] < idealCameraPos[0] && camPush(1, 0)) ||
    (camera[0] > idealCameraPos[0] && camPush(-1, 0)) ||
    (camera[1] < idealCameraPos[1] && camPush(0, 1)) ||
    (camera[1] > idealCameraPos[1] && camPush(0, -1))
  );

  const camMax = [camSize[0] + camera[0], camSize[1] + camera[1]];
  if (!contains(mapBounds, { min: camera, max: camMax })) camera = [0, 0];

  for (const trig of triggers[roomKey] || []) {
    const { pos, fn } = trig;
    if (trig.active && pos + "" == "" + player)
      (trig.active = 0), fn(playerPosB4);
  }
}

function render() {
  if (state.gameRunning) return;

  if (fullscreen) {
    room.forEach((l, i) => (i ? l.push() : l.set()));
    return;
  }

  let i = 0;
  for (const layer of room) {
    for (let x = 0; x < screen.width; x++)
      for (let y = 0; y < screen.height; y++) {
        let layerChar = layer.read(camera[0] + x, camera[1] + y);
        screen.write(x, y, layerChar);
      }
    i++ ? screen.push() : screen.set();
  }
}

function renderText() {
  if (modal) return;

  let opts = { y: 15, color: color`L` };
  let text = questText;

  function rotate(text, noOfChars = 0) {
    const n = noOfChars % text.length;
    return text.slice(n) + text.slice(0, n);
  }
  if (room[1].read(player[0], player[1] - 1) == sprites.sign)
    (text = rotate(
      "SIGN: HQ's the rightmost house!    ",
      ~~(Date.now() / 280)
    ).substr(0, 160 / 8)),
      (opts.color = color`H`);

  clearText();
  addText(text, opts);
}
